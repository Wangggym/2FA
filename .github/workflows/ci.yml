name: CI

on:
  pull_request:
    branches: [ master ]
  push:
    branches: [ master ]
    tags:
      - 'v*'
  workflow_dispatch:

# 设置并发控制，确保同一分支不会重复运行
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  FLUTTER_VERSION: '3.24.1'
  JAVA_VERSION: '17'

jobs:
  # 复用的 setup 步骤
  setup:
    runs-on: ubuntu-latest
    outputs:
      cache-key: ${{ steps.cache-key.outputs.value }}
    steps:
      - id: cache-key
        run: echo "value=${{ runner.os }}-flutter-${{ hashFiles('**/pubspec.lock') }}" >> $GITHUB_OUTPUT

  analyze-and-test:
    needs: setup
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      # 缓存 Flutter SDK
      - uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: 'stable'
          cache: true
      
      # 缓存 pub 依赖
      - uses: actions/cache@v4
        with:
          path: |
            ${{ env.PUB_CACHE }}
            .dart_tool
          key: ${{ needs.setup.outputs.cache-key }}
          restore-keys: |
            ${{ runner.os }}-flutter-
      
      - name: Install Dependencies
        run: flutter pub get
        
      - name: Verify Formatting
        run: dart format --output=none --set-exit-if-changed .
        
      - name: Analyze Project Source
        run: flutter analyze
        
      - name: Run Tests
        run: flutter test --coverage
        
      - name: Upload Coverage
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: coverage/lcov.info
          fail_ci_if_error: true

  # PR 时的构建测试
  test-build:
    if: github.event_name == 'pull_request'
    needs: [setup, analyze-and-test]
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: android
            build-command: flutter build apk --release
          - os: macos-latest
            target: macos
            build-command: flutter build macos --release
          - os: macos-latest
            target: ios
            build-command: flutter build ios --release --no-codesign
      fail-fast: false
    
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
      
      - if: matrix.target == 'android'
        uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: ${{ env.JAVA_VERSION }}
          cache: 'gradle'
      
      - uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: 'stable'
          cache: true
      
      - uses: actions/cache@v4
        with:
          path: |
            ${{ env.PUB_CACHE }}
            .dart_tool
            ${{ matrix.target == 'ios' && 'ios/Pods' || '' }}
          key: ${{ needs.setup.outputs.cache-key }}-${{ matrix.target }}
          restore-keys: |
            ${{ runner.os }}-flutter-${{ matrix.target }}-
      
      - name: Install Dependencies
        run: |
          flutter pub get
          if [ "${{ matrix.target }}" = "ios" ]; then
            cd ios && pod install && cd ..
          fi
      
      - name: Test Build ${{ matrix.target }}
        run: ${{ matrix.build-command }}

  # Release 构建
  build:
    if: startsWith(github.ref, 'refs/tags/v')
    needs: [setup, analyze-and-test]
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: android
            build-command: flutter build apk --release
            artifact-path: build/app/outputs/flutter-apk/app-release.apk
            artifact-name: android-release.apk
          - os: macos-latest
            target: macos
            build-command: flutter build macos --release
            artifact-path: build/macos/Build/Products/Release/TwoFactorAuth.dmg
            artifact-name: macos-release.dmg
          - os: macos-latest
            target: ios
            build-command: flutter build ios --release --no-codesign
            artifact-path: build/ios/iphoneos/Runner.app
            artifact-name: ios-release.app
      fail-fast: false
    
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
      
      - if: matrix.target == 'android'
        uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: ${{ env.JAVA_VERSION }}
          cache: 'gradle'
      
      - uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: 'stable'
          cache: true
      
      - uses: actions/cache@v4
        with:
          path: |
            ${{ env.PUB_CACHE }}
            .dart_tool
            ${{ matrix.target == 'ios' && 'ios/Pods' || '' }}
          key: ${{ needs.setup.outputs.cache-key }}-${{ matrix.target }}
          restore-keys: |
            ${{ runner.os }}-flutter-${{ matrix.target }}-
      
      - name: Install Dependencies
        run: |
          flutter pub get
          if [ "${{ matrix.target }}" = "ios" ]; then
            cd ios && pod install && cd ..
          fi
      
      - if: matrix.target == 'macos'
        name: Install create-dmg
        run: brew install create-dmg
      
      - name: Build ${{ matrix.target }}
        run: ${{ matrix.build-command }}
      
      - if: matrix.target == 'macos'
        name: Create DMG
        run: |
          cd build/macos/Build/Products/Release
          create-dmg \
            --volname "Two Factor Authentication" \
            --window-pos 200 120 \
            --window-size 800 400 \
            --icon-size 100 \
            --icon "two_factor_authentication.app" 200 190 \
            --hide-extension "two_factor_authentication.app" \
            --app-drop-link 600 185 \
            "TwoFactorAuth.dmg" \
            "two_factor_authentication.app"
      
      - if: matrix.target == 'ios'
        name: Create IPA
        run: |
          cd build/ios/iphoneos
          mkdir Payload
          cp -r Runner.app Payload
          zip -r app.ipa Payload
        
      - uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact-name }}
          path: |
            ${{ matrix.artifact-path }}
            ${{ matrix.target == 'ios' && 'build/ios/iphoneos/app.ipa' || '' }}
          retention-days: 5

  # 只在打tag时创建release
  release:
    needs: build
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@v4
      
      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            android-release.apk
            macos-release.dmg
            ios-release.app/app.ipa
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}